1.  Is JSX mandatory for React?
    JSX (JavaScript XML) is not mandatory in React, but it is widely used because it simplifies UI development. React can work without JSX by using
    the React.createElement() method to create elements manually.

    Example 01:- React Without JSX (Verbose & Less Readable)
    --------------------------------------------------------
        import React from "react";
        const element = React.createElement(
        "div",
        { className: "container" },
        React.createElement("h1", null, "Hello, React!"),
        React.createElement("p", null, "This is without JSX.")
        );
        export default element;

    Example 02:- React With JSX (Cleaner & More Maintainable)
    ---------------------------------------------------------
        import React from "react";
        const Element = () => (
        <div className="container">
            <h1>Hello, React!</h1>
            <p>This is with JSX.</p>
        </div>
        );
        export default Element;

====================================================================================================================================================

2.  Is ES6 mandatory for React?
    No, ES6 is not mandatory for React, but it is highly recommended as modern React relies on ES6+ features for cleaner and more efficient code.
    It is important because it introduces useful features like Arrow Functions, Destructuring, Template literals, Spread/Rest Operators and Modules,
    which improve code readability and maintainability.

    Example 01:- React Without ES6 (Verbose)
    ----------------------------------------
        const React = require("react");
        function Component() {
        return React.createElement("h1", null, "Hello React!");
        }
        module.exports = Component;

    Example 02:- React With ES6 (Cleaner)
    -------------------------------------
        import React from "react";
        const Component = () => <h1>Hello React!</h1>;
        export default Component;

====================================================================================================================================================

3.  {TitleComponent} vs {TitleComponent()} vs {<TitleComponent/>} vs {<TitleComponent></TitleComponent>} in JSX
    -   {TitleComponent}                    ⇒   Used to access a variable; Not used for rendering.
    -   {TitleComponent()}                  ⇒   Calls a function that might return JSX; Not typical for component rendering.
    -   {<TitleComponent />}                ⇒   JSX syntax for rendering a self-closing react component (Components without children).
    -   {<TitleComponent></TitleComponent>} ⇒   Syntax for rendering a non-self-closing component (Components with potential children).

====================================================================================================================================================

4.  How can I write comments in JSX?

    In JSX, comments are written using JavaScript syntax inside curly braces {}.

    Single-line Comment in JSX:-
    ----------------------------
        {/* This is a single-line comment in JSX */}

    Multi-line Comment in JSX:-
    ---------------------------
        {/*
            This is a 
            multi-line comment 
            in JSX
        */}

===================================================================================================================================================

5.  What is <React.Fragment></React.Fragment> and <></>?
    Both are <React.Fragment></React.Fragment> and <></> are used to group multiple elements without adding extra DOM nodes.
    ~   <React.Fragment></React.Fragment>   ⇒   Supports attributes like key.
    ~   <></> (Short Syntax)                ⇒   Cleaner but does not support attributes.
    It is recommended to use <></> for simplicity unless attributes are needed!

===================================================================================================================================================

6.  What is Virtual DOM?
    The Virtual DOM (VDOM) is a lightweight copy of the real DOM that React uses to update the UI efficiently.
    ~   How it works  ⇒   React updates the VDOM ---> Diffs changes ---> Updates only necessary parts in the real DOM.
    ~   Benefits      ⇒   Faster updates, better performance, and optimized rendering.

===================================================================================================================================================

7.  What is Reconciliation in React?
    Reconciliation is React's process of efficiently updating the real DOM by comparing Virtual DOM changes and applying only necessary updates.
    · Optimizes performance by avoiding unnecessary re-renders.
    · Using diffing and minimal updates for faster UI updates.

===================================================================================================================================================

8.  What is React Fiber?

    React Fiber is the reconcilitaion engine in React (since v16) that improves performance, concurrency, and UI responsiveness.
    · Faster rendering with incremental updates.
    · Prioritizes UI interactions for smoother interactions.
    · Handles animations and transitions effciently.

===================================================================================================================================================

9.  Why do we need keys in React?

    Keys help React efficiently update and re-render lists by uniquely identifying elements.
    · Optimizes reconciliation by tracking changes.
    · Prevents UI bugs from incorrect reordering.
    · Improves performance by minimizing re-renders.
    It is adviceable to use unique keys(like IDs) for better efficiency!

===================================================================================================================================================

10. Can we use index as keys in React?
    ~   Yes, we can use index as keys in React, but only if the list is static (no additions, deletions, or reordering).
    ~   It is adviceable to avoid using index if the list changes as it may cause UI bugs.
    ~   Use a unique ID for better performance and stability.

===================================================================================================================================================

11. What is props in React? What are the ways to use it?
    Props (short for properties) are used to pass data from a parent component to a child component in React. Props are read-only and help make
    components reusable.
    
    Ways to pass Props:-
    --------------------

    · Passing props to a component:
      -----------------------------
      const Greeting = (props) => <h1>Hello, {props.name}!</h1>;
      <Greeting name="John" />  // Passing "John" as a prop

    · Destructuring Props:
      --------------------
      const Greeting = ({ name }) => <h1>Hello, {name}!</h1>;

    · Default Props:
      --------------
      const Greeting = ({ name = "Guest" }) => <h1>Hello, {name}!</h1>;

    · Passing objects as props:
      -------------------------
      const user = { name: "Alice", age: 25 };
      <UserCard user={user} />

===================================================================================================================================================

12. What is a Config Driven UI?
    Config Driven UI is an approach where the UI is dynamically generated based on a configuration (JSON, API response, or metadata) instead of
    hardcoded components.

    ~   Why Use IT?
        -----------
        · Flexible & Scalable           ⇒   UI changes without modifying code.
        · Dynamic Customization         ⇒   Different UIs for different users.
        · Reduces Development Effort    ⇒   Changes are handled via configs, not code updates.
    
    Example: Config-Based UI Rendering
    ----------------------------------

    const uiConfig = [
        { type: "button", label: "Click Me" },
        { type: "input", placeholder: "Enter Name" }
    ];
    const DynamicUI = ({ config }) => {
        return config.map((item, index) => {
            if (item.type === "button") return <button key={index}>{item.label}</button>;
            if (item.type === "input") return <input key={index} placeholder={item.placeholder} />;
        });
    };
    <DynamicUI config={uiConfig} />



    